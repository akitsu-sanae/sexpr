* sexpr
  sexpr strives to be the canonical serialization/deserialization and general
  manipulation format for S-expressions in Rust.

  sexpr can read numerous variants, including "/Standard/", "/Advanced/" and
  "/Canonical/" S-expressions. Predefined configurations for various extension
  formats exist for the parser and serializer -- understanding various
  extensions to the format from dozens of applications, languages and protocols.
  
  - RFC 2693
  - SMTLIB
  - SMTLIBv2
  - GPG / libgcrypt
  - Kerberos
  - KiCad
  - Guile scheme

  If one of these doesn't match your format, you can configure the parser
  accordingly!

* Overview
  S-expressions are data structures for representing complex data. They are
  either primitives ("atoms") or lists of simpler S-expressions. Here is a
  sample S-expression:

  ~(snicker "abc" (#03# |YWJj|))~

  It is a list of length three: 

  - the octet-string "snicker"

  - the octet-string "abc"

  - a sub-list containing two elements:
    - the hexadecimal constant #03#
    - the base-64 constant |YWJj| (which is the same as "abc")
  
** Goals
   Despite rapidly shifting technological landscapes and even faster changing
   attitudes about 'proper' programming. S-expressions, and their many variants,
   remain ([[http://www-formal.stanford.edu/jmc/recursive/recursive.html][as one of the oldest general encoding formats still in use today]]).

   In spite of numerous challengers like JSON and XML, S-expressions retain the
   advantages laid out by early computing and internetworking pioneers:
 
   - Generality :: S-expressions are good at representing arbitrary data.
   - Readability :: it is easy for someone to examine and understand the structure of an S-expression.
   - Economy :: S-expressions represent data compactly.
   - Tranportability :: S-expressions are easy to transport over communication media (such as email) with unusual encoding rules.
   - Flexibility :: S-expressions make it relatively simple to modify and extend data structures.
   - Canonicalization ::  They produce a unique "canonical" form of an S-expression, for digital signature purposes.
   - Efficiency :: S-expressions should admit in-memory representations that allow efficient processing.   
  
** Convert 
* TODO
  - Convert Arrays of unsigned and signed ints, strings, etc to regular lists
  - Convert hash tables to alists
  - Implement pair-syntax.

